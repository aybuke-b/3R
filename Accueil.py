import streamlit as st
import time
from modules_app.st_config import (
    page_config,
    background_style,
    remove_white_space,
    fontawesome_import,
    font_import,
    font_apply,
    icon,
    last_update,
    underline_decoration,
)
from modules_app.data_import import load_df

page_config()
background_style()
remove_white_space()
underline_decoration()
version = fontawesome_import(major=6, minor=5, patch=1)
font_import(font="Audiowide")
font_apply(font="Audiowide", tag="h1")


fontawesome_icon = icon(type="brands", icon_name="font-awesome", color="#74C0FC")
layer_icon = icon(type="solid", icon_name="layer-group")
apple_icon = icon(type="brands", icon_name="apple")
coins_icon = icon(type="solid", icon_name="coins")
list_icon = icon(type="solid", icon_name="list-check")
sparkle_icon = icon(type="solid", icon_name="wand-magic-sparkles", color="#ffd43b")
cc_by_nc_icon = icon(type="brands", icon_name="creative-commons-nc-eu", color="#74C0FC")
external_link_icon = icon(
    type="solid", icon_name="arrow-up-right-from-square", color="#0068c9", size="2xs"
)
github_icon = icon(type="brands", icon_name="github", size="lg")


df = load_df()

st.title("üì± Smart Specs")
st.header("Un :blue[comparateur], :grey[*am√©lior√©*.]", divider="gray")

with st.sidebar:
    col1, col2, col3 = st.columns([0.2, 0.6, 0.2])
    with col1:
        st.write("")
    with col2:
        st.image("imgs/logo.png", use_column_width="auto")
    with col2:
        st.write("")
    st.caption("Cr√©e par :")
    with st.container(border=True):
        st.markdown(
            f"""
            {github_icon} [**Corentin DUCLOUX**](https://github.com/CDucloux) \n
            {github_icon} [**Aybuk√© BICAT**](https://github.com/aybuke-b)
            """,
            unsafe_allow_html=True,
        )

catchphrase = """
    üí° Obtenez **bien plus** qu'une *simple liste* de t√©l√©phones !  
    """


def home_stream():
    for word in catchphrase.split():
        yield word + " "
        time.sleep(0.2)


st.write_stream(home_stream)


st.markdown(
    f"""
    - {apple_icon} Choisissez une ou plusieurs marques...
    - {coins_icon} un budget maximum...
    - {list_icon} quelques caract√©ristiques...
    - {sparkle_icon} laissez-vous guider pour trouver **LE** smartphone de vos r√™ves !

    **Smart Specs¬Æ** utilise un mod√®le **SFA** pour d√©terminer l'*efficacit√©* d'un prix (c'est √† dire le rapport *qualit√©-prix* du t√©l√©phone)
    """,
    unsafe_allow_html=True,
)

with st.expander("En savoir plus sur le mod√®le **SFA**"):
    st.markdown(
        f"""
        La **SFA** ([Stochastic Frontier Analysis {external_link_icon}](https://en.wikipedia.org/wiki/Stochastic_frontier_analysis)),
        est une m√©thode √©conom√©trique permettant d'introduire la notion d'*inefficacit√©*
        dans le cadre d'un mod√®le de r√©gression. 

        Initialement, le concept de fronti√®re stochastique repose sur l'id√©e 
        qu'il existe une fronti√®re th√©orique, appel√©e fronti√®re de production,
        qui repr√©sente la production maximale qu'une entreprise peut atteindre
        avec les ressources et la technologie √† sa disposition.
        Cependant, en raison de divers facteurs, 
        certaines entreprises ne sont pas en mesure d'atteindre cette fronti√®re : elles sont dites inefficaces.

        Si la **SFA** est couramment utilis√©e dans l'analyse de la production,
        le concept peut aussi √™tre √©tendu √† l'analyse des co√ªts. 

        $\Rightarrow$ **Dans notre cadre, cela permet de d√©terminer l'efficacit√© individuelle par mod√®le de t√©l√©phone.**
        """,
        unsafe_allow_html=True,
    )

col1, col2 = st.columns(2)
with col2:
    st.caption(f"*Derni√®re date d'actualisation* : {last_update(df)}")

st.write(
    f"""
    > *Ic√¥nes* : {fontawesome_icon} **FontAwesome** version **{version[0]}**
    &mdash; *Licence* : {cc_by_nc_icon} **CC-BY-NC**
    """,
    unsafe_allow_html=True,
)
